// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {
            "email": "Jacksontpa7@gmail.com"
        },
        "license": {
            "name": "MIT"
        },
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/bills/assign-participants": {
            "post": {
                "description": "Assign participants to a bill and split item prices equally per participant",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Bill"
                ],
                "summary": "Assign participants to a bill",
                "parameters": [
                    {
                        "description": "Assign Participants Request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dtos.AssignParticipantsRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Structured Assign Participants Result",
                        "schema": {
                            "$ref": "#/definitions/dtos.AssignParticipantsResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid input"
                    },
                    "500": {
                        "description": "Internal error"
                    }
                }
            }
        },
        "/bills/bill-without-participant": {
            "post": {
                "description": "Save a bill with items, tax, and service, without splitting between participants",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Bill"
                ],
                "summary": "Create bill (no participants)",
                "parameters": [
                    {
                        "description": "Bill Data without participant",
                        "name": "bill",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dtos.CreateBillWithoutParticipantRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/dtos.CreateBillWithoutParticipantResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/bills/by-creator": {
            "get": {
                "description": "Get all bills created by a specific creator, optionally filter by billId",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Bill"
                ],
                "summary": "Get bills by creator",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Creator ID",
                        "name": "creatorId",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Bill ID (optional filter)",
                        "name": "billId",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/dtos.SuccessResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/definitions/dtos.GetBillByCreatorResponse"
                                            }
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/check": {
            "get": {
                "description": "Check backend health",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Payment"
                ],
                "summary": "Check backend health",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/confirm-payment": {
            "get": {
                "description": "example return confirms a payment on Hedera",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Payment"
                ],
                "summary": "Example confirm a payment",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/friends/accept": {
            "post": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Friend"
                ],
                "summary": "Accept friend request",
                "parameters": [
                    {
                        "description": "Friend Info",
                        "name": "friend",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dtos.AcceptFriendRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/dtos.AcceptFriendResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid Request"
                    },
                    "404": {
                        "description": "User or Friend Not Found"
                    },
                    "409": {
                        "description": "Relationship Already Exists"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            }
        },
        "/friends/add": {
            "post": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Friend"
                ],
                "summary": "Create friend request",
                "parameters": [
                    {
                        "description": "Friend Info",
                        "name": "friend",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dtos.AddFriendRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/dtos.AddFriendResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid Request"
                    },
                    "404": {
                        "description": "User or Friend Not Found"
                    },
                    "409": {
                        "description": "Relationship Already Exists"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            }
        },
        "/friends/alias": {
            "post": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Friend"
                ],
                "summary": "add friend nickname",
                "parameters": [
                    {
                        "description": "Friend Info",
                        "name": "friend",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dtos.FriendNicknameRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/dtos.FriendResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid Request"
                    },
                    "404": {
                        "description": "User or Friend Not Found"
                    },
                    "409": {
                        "description": "Relationship Already Exists"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            }
        },
        "/friends/decline": {
            "post": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Friend"
                ],
                "summary": "Decline friend request",
                "parameters": [
                    {
                        "description": "Friend Info",
                        "name": "friend",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dtos.DeclineFriendRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/dtos.DeclineFriendResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid Request"
                    },
                    "404": {
                        "description": "User or Friend Not Found"
                    },
                    "409": {
                        "description": "Relationship Already Exists"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            }
        },
        "/friends/get-pending-request/{user_wallet_address}": {
            "get": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Friend"
                ],
                "summary": "Get pending friend request by user wallet address",
                "parameters": [
                    {
                        "type": "string",
                        "description": "user wallet addres",
                        "name": "user_wallet_address",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/dtos.PendingFriendResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid Request"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            }
        },
        "/friends/{user_wallet_address}": {
            "get": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Friend"
                ],
                "summary": "Fetch friend",
                "parameters": [
                    {
                        "type": "string",
                        "description": "User Wallet Address",
                        "name": "user_wallet_address",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/dtos.FriendResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid Request"
                    },
                    "404": {
                        "description": "User or Friend Not Found"
                    },
                    "409": {
                        "description": "Relationship Already Exists"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            }
        },
        "/get-rate": {
            "get": {
                "description": "Get HBAR Rate by 1 USD",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Rate"
                ],
                "summary": "Get HBAR Rate (1 USD)",
                "responses": {
                    "200": {
                        "description": "success get HBAR rate",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "400": {
                        "description": "Invalid request"
                    },
                    "500": {
                        "description": "Failed to fetch HBAR rate"
                    }
                }
            }
        },
        "/receipt/": {
            "post": {
                "description": "Accepts a receipt image (PNG/JPEG) and get the detail.",
                "consumes": [
                    "multipart/form-data"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "receipt"
                ],
                "summary": "Extract structured receipt data from an uploaded image",
                "parameters": [
                    {
                        "type": "file",
                        "description": "Receipt image file",
                        "name": "file",
                        "in": "formData",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Structured receipt result.",
                        "schema": {
                            "$ref": "#/definitions/dtos.ReceiptResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid input (missing file, bad form data)."
                    },
                    "500": {
                        "description": "Internal error (Gemini failure, parse error, etc.)."
                    }
                }
            }
        },
        "/users": {
            "post": {
                "description": "Save wallet address to database",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "Register a new user",
                "parameters": [
                    {
                        "description": "User info",
                        "name": "user",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.User"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "dtos.AcceptFriendRequest": {
            "type": "object",
            "required": [
                "id"
            ],
            "properties": {
                "id": {
                    "type": "string"
                }
            }
        },
        "dtos.AcceptFriendResponse": {
            "type": "object",
            "properties": {
                "friend_wallet_address": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "nickname": {
                    "type": "string"
                },
                "user_wallet_address": {
                    "type": "string"
                }
            }
        },
        "dtos.AddFriendRequest": {
            "type": "object",
            "required": [
                "friend_wallet_address",
                "user_wallet_address"
            ],
            "properties": {
                "friend_wallet_address": {
                    "type": "string"
                },
                "user_wallet_address": {
                    "type": "string"
                }
            }
        },
        "dtos.AddFriendResponse": {
            "type": "object",
            "required": [
                "friend_wallet_address",
                "user_wallet_address"
            ],
            "properties": {
                "friend_wallet_address": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "status": {
                    "type": "string"
                },
                "user_wallet_address": {
                    "type": "string"
                }
            }
        },
        "dtos.AssignParticipantDetailRequest": {
            "type": "object",
            "properties": {
                "isPaid": {
                    "type": "boolean"
                },
                "items": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/dtos.AssignParticipantItemRequest"
                    }
                },
                "participantId": {
                    "type": "string"
                }
            }
        },
        "dtos.AssignParticipantDetailResponse": {
            "type": "object",
            "properties": {
                "amountOwed": {
                    "type": "integer"
                },
                "isPaid": {
                    "type": "boolean"
                },
                "items": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/dtos.AssignParticipantItemWithAmount"
                    }
                },
                "participantId": {
                    "type": "string"
                }
            }
        },
        "dtos.AssignParticipantItemRequest": {
            "type": "object",
            "properties": {
                "itemId": {
                    "type": "string"
                }
            }
        },
        "dtos.AssignParticipantItemWithAmount": {
            "type": "object",
            "properties": {
                "amount": {
                    "type": "integer"
                },
                "itemId": {
                    "type": "string"
                }
            }
        },
        "dtos.AssignParticipantsRequest": {
            "type": "object",
            "properties": {
                "billId": {
                    "type": "string"
                },
                "participants": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/dtos.AssignParticipantDetailRequest"
                    }
                }
            }
        },
        "dtos.AssignParticipantsResponse": {
            "type": "object",
            "properties": {
                "billId": {
                    "type": "string"
                },
                "participants": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/dtos.AssignParticipantDetailResponse"
                    }
                }
            }
        },
        "dtos.CreateBillWithoutParticipantItemRequest": {
            "type": "object",
            "properties": {
                "name": {
                    "type": "string",
                    "example": "Steak"
                },
                "price": {
                    "type": "integer",
                    "example": 40000
                },
                "priceAfterTax": {
                    "type": "number",
                    "example": 87200
                },
                "priceInHBAR": {
                    "type": "number",
                    "example": 0
                },
                "quantity": {
                    "type": "integer",
                    "example": 2
                }
            }
        },
        "dtos.CreateBillWithoutParticipantItemResponse": {
            "type": "object",
            "properties": {
                "itemId": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "price": {
                    "type": "integer"
                },
                "priceAfterTax": {
                    "type": "number"
                },
                "priceInHBAR": {
                    "type": "number"
                },
                "quantity": {
                    "type": "integer"
                }
            }
        },
        "dtos.CreateBillWithoutParticipantRequest": {
            "type": "object",
            "properties": {
                "creatorId": {
                    "type": "string",
                    "example": "user123"
                },
                "date": {
                    "type": "string",
                    "example": "2019-11-02"
                },
                "items": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/dtos.CreateBillWithoutParticipantItemRequest"
                    }
                },
                "service": {
                    "type": "number",
                    "example": 0
                },
                "storeName": {
                    "type": "string",
                    "example": "East Repair Inc."
                },
                "tax": {
                    "type": "number",
                    "example": 9.06
                },
                "totalAmount": {
                    "type": "integer",
                    "example": 15406
                }
            }
        },
        "dtos.CreateBillWithoutParticipantResponse": {
            "type": "object",
            "properties": {
                "billId": {
                    "type": "string"
                },
                "createdAt": {
                    "type": "string"
                },
                "creatorId": {
                    "type": "string"
                },
                "date": {
                    "type": "string"
                },
                "items": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/dtos.CreateBillWithoutParticipantItemResponse"
                    }
                },
                "service": {
                    "type": "number"
                },
                "storeName": {
                    "type": "string"
                },
                "tax": {
                    "type": "number"
                },
                "totalAmount": {
                    "type": "integer"
                }
            }
        },
        "dtos.DeclineFriendRequest": {
            "type": "object",
            "required": [
                "id"
            ],
            "properties": {
                "id": {
                    "type": "string"
                }
            }
        },
        "dtos.DeclineFriendResponse": {
            "type": "object",
            "required": [
                "friend_wallet_address",
                "user_wallet_address"
            ],
            "properties": {
                "friend_wallet_address": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "status": {
                    "type": "string"
                },
                "user_wallet_address": {
                    "type": "string"
                }
            }
        },
        "dtos.FriendNicknameRequest": {
            "type": "object",
            "required": [
                "friend_wallet_address",
                "nickname",
                "user_wallet_address"
            ],
            "properties": {
                "friend_wallet_address": {
                    "type": "string"
                },
                "nickname": {
                    "type": "string"
                },
                "user_wallet_address": {
                    "type": "string"
                }
            }
        },
        "dtos.FriendResponse": {
            "type": "object",
            "properties": {
                "friend_wallet_address": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "nickname": {
                    "type": "string"
                }
            }
        },
        "dtos.GetBillByCreatorItemResponse": {
            "type": "object",
            "properties": {
                "itemId": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "price": {
                    "type": "integer"
                },
                "quantity": {
                    "type": "integer"
                }
            }
        },
        "dtos.GetBillByCreatorResponse": {
            "type": "object",
            "properties": {
                "billId": {
                    "type": "string"
                },
                "billTitle": {
                    "type": "string"
                },
                "createdAt": {
                    "type": "string"
                },
                "items": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/dtos.GetBillByCreatorItemResponse"
                    }
                },
                "service": {
                    "type": "number"
                },
                "tax": {
                    "type": "number"
                },
                "totalAmount": {
                    "type": "integer"
                }
            }
        },
        "dtos.PendingFriendResponse": {
            "type": "object",
            "properties": {
                "friend_wallet_address": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "status": {
                    "type": "string"
                },
                "user_wallet_address": {
                    "type": "string"
                }
            }
        },
        "dtos.ReceiptItem": {
            "type": "object",
            "properties": {
                "name": {
                    "type": "string",
                    "example": "Front and rear brake cables"
                },
                "priceAfterTax": {
                    "type": "number",
                    "example": 105.88083
                },
                "priceInHBAR": {
                    "type": "number",
                    "example": 0
                },
                "quantity": {
                    "type": "number",
                    "example": 1
                },
                "totalPrice": {
                    "type": "number",
                    "example": 100
                },
                "unitPrice": {
                    "type": "number",
                    "example": 100
                }
            }
        },
        "dtos.ReceiptResponse": {
            "type": "object",
            "properties": {
                "date": {
                    "type": "string",
                    "example": "2025-10-02"
                },
                "items": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/dtos.ReceiptItem"
                    }
                },
                "service": {
                    "type": "number"
                },
                "storeName": {
                    "type": "string",
                    "example": "Nigger Store"
                },
                "tax": {
                    "type": "number",
                    "example": 9.1
                },
                "totalAmount": {
                    "type": "number",
                    "example": 15.4
                }
            }
        },
        "dtos.SuccessResponse": {
            "type": "object",
            "properties": {
                "data": {},
                "message": {
                    "type": "string"
                }
            }
        },
        "models.User": {
            "type": "object",
            "properties": {
                "wallet_address": {
                    "type": "string"
                }
            }
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "1.0",
	Host:             "",
	BasePath:         "/api/v1",
	Schemes:          []string{},
	Title:            "",
	Description:      "",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
