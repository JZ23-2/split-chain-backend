// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {
            "email": "Jacksontpa7@gmail.com"
        },
        "license": {
            "name": "MIT"
        },
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/bills": {
            "post": {
                "description": "Create a bill with participants and their items",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Bill"
                ],
                "summary": "Create a new bill",
                "parameters": [
                    {
                        "description": "Bill Info",
                        "name": "bill",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dtos.CreateBillRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/dtos.CreateBillResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/check": {
            "get": {
                "description": "Check backend health",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Payment"
                ],
                "summary": "Check backend health",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/confirm-payment": {
            "get": {
                "description": "example return confirms a payment on Hedera",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Payment"
                ],
                "summary": "Example confirm a payment",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/friends/accept": {
            "post": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Friend"
                ],
                "summary": "Accept friend request",
                "parameters": [
                    {
                        "description": "Friend Info",
                        "name": "friend",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dtos.AcceptFriendRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/dtos.AcceptFriendResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid Request"
                    },
                    "404": {
                        "description": "User or Friend Not Found"
                    },
                    "409": {
                        "description": "Relationship Already Exists"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            }
        },
        "/friends/add": {
            "post": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Friend"
                ],
                "summary": "Create friend request",
                "parameters": [
                    {
                        "description": "Friend Info",
                        "name": "friend",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dtos.AddFriendRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/dtos.AddFriendResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid Request"
                    },
                    "404": {
                        "description": "User or Friend Not Found"
                    },
                    "409": {
                        "description": "Relationship Already Exists"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            }
        },
        "/friends/decline": {
            "post": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Friend"
                ],
                "summary": "Decline friend request",
                "parameters": [
                    {
                        "description": "Friend Info",
                        "name": "friend",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dtos.DeclineFriendRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/dtos.DeclineFriendResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid Request"
                    },
                    "404": {
                        "description": "User or Friend Not Found"
                    },
                    "409": {
                        "description": "Relationship Already Exists"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            }
        },
        "/participants/{participant_id}": {
            "get": {
                "description": "Get participant all bills",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Participants"
                ],
                "summary": "Get participant Bills",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Participant ID",
                        "name": "participant_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/dtos.ParticipantDetailResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/participants/{participant_id}/{bill_id}": {
            "get": {
                "description": "Retrieve participant detail including bill and items using billId and participantId",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Participants"
                ],
                "summary": "Get participant detail in a bill",
                "parameters": [
                    {
                        "description": "Bill and Participant IDs",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dtos.GetParticipantDetailRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/dtos.ParticipantDetailResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/rate": {
            "post": {
                "description": "Takes a receipt JSON, converts each item's price (after tax) to HBAR using the current rate, and returns the updated receipt.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Rate Conversion"
                ],
                "summary": "Convert item prices to HBAR",
                "parameters": [
                    {
                        "description": "Receipt data",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dtos.ReceiptResponse"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/dtos.ReceiptResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request"
                    },
                    "500": {
                        "description": "Failed to fetch HBAR rate"
                    }
                }
            }
        },
        "/receipt/": {
            "post": {
                "description": "Accepts a receipt image (PNG/JPEG) and get the detail.",
                "consumes": [
                    "multipart/form-data"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "receipt"
                ],
                "summary": "Extract structured receipt data from an uploaded image",
                "parameters": [
                    {
                        "type": "file",
                        "description": "Receipt image file",
                        "name": "file",
                        "in": "formData",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Structured receipt result.",
                        "schema": {
                            "$ref": "#/definitions/dtos.ReceiptResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid input (missing file, bad form data)."
                    },
                    "500": {
                        "description": "Internal error (Gemini failure, parse error, etc.)."
                    }
                }
            }
        },
        "/users": {
            "post": {
                "description": "Save wallet address to database",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "Register a new user",
                "parameters": [
                    {
                        "description": "User info",
                        "name": "user",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.User"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "dtos.AcceptFriendRequest": {
            "type": "object",
            "required": [
                "id"
            ],
            "properties": {
                "id": {
                    "type": "string"
                }
            }
        },
        "dtos.AcceptFriendResponse": {
            "type": "object",
            "properties": {
                "friend_wallet_address": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "nickname": {
                    "type": "string"
                },
                "user_wallet_address": {
                    "type": "string"
                }
            }
        },
        "dtos.AddFriendRequest": {
            "type": "object",
            "required": [
                "friend_wallet_address",
                "user_wallet_address"
            ],
            "properties": {
                "friend_wallet_address": {
                    "type": "string"
                },
                "user_wallet_address": {
                    "type": "string"
                }
            }
        },
        "dtos.AddFriendResponse": {
            "type": "object",
            "required": [
                "friend_wallet_address",
                "user_wallet_address"
            ],
            "properties": {
                "friend_wallet_address": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "status": {
                    "type": "string"
                },
                "user_wallet_address": {
                    "type": "string"
                }
            }
        },
        "dtos.CreateBillItemResponse": {
            "type": "object",
            "properties": {
                "itemId": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "price": {
                    "type": "integer"
                }
            }
        },
        "dtos.CreateBillParticipantResponse": {
            "type": "object",
            "properties": {
                "amountOwed": {
                    "type": "integer"
                },
                "isPaid": {
                    "type": "boolean"
                },
                "items": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/dtos.CreateBillItemResponse"
                    }
                },
                "participantId": {
                    "type": "string"
                }
            }
        },
        "dtos.CreateBillRequest": {
            "type": "object",
            "properties": {
                "billTitle": {
                    "type": "string",
                    "example": "Dinner at Cafe"
                },
                "creatorId": {
                    "type": "string",
                    "example": "user123"
                },
                "participants": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/dtos.CreateParticipantRequest"
                    }
                },
                "totalAmount": {
                    "type": "integer",
                    "example": 200000
                }
            }
        },
        "dtos.CreateBillResponse": {
            "type": "object",
            "properties": {
                "billId": {
                    "type": "string"
                },
                "billTitle": {
                    "type": "string"
                },
                "createdAt": {
                    "type": "string"
                },
                "creatorId": {
                    "type": "string"
                },
                "participants": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/dtos.CreateBillParticipantResponse"
                    }
                },
                "totalAmount": {
                    "type": "integer"
                }
            }
        },
        "dtos.CreateItemRequest": {
            "type": "object",
            "properties": {
                "name": {
                    "type": "string",
                    "example": "Steak"
                },
                "price": {
                    "type": "integer",
                    "example": 80000
                }
            }
        },
        "dtos.CreateParticipantRequest": {
            "type": "object",
            "properties": {
                "amountOwed": {
                    "type": "integer",
                    "example": 100000
                },
                "isPaid": {
                    "type": "boolean",
                    "example": true
                },
                "items": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/dtos.CreateItemRequest"
                    }
                },
                "participantId": {
                    "type": "string",
                    "example": "user123"
                }
            }
        },
        "dtos.DeclineFriendRequest": {
            "type": "object",
            "required": [
                "id"
            ],
            "properties": {
                "id": {
                    "type": "string"
                }
            }
        },
        "dtos.DeclineFriendResponse": {
            "type": "object",
            "required": [
                "friend_wallet_address",
                "user_wallet_address"
            ],
            "properties": {
                "friend_wallet_address": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "status": {
                    "type": "string"
                },
                "user_wallet_address": {
                    "type": "string"
                }
            }
        },
        "dtos.GetParticipantDetailRequest": {
            "type": "object",
            "required": [
                "billId",
                "participantId"
            ],
            "properties": {
                "billId": {
                    "type": "string"
                },
                "participantId": {
                    "type": "string"
                }
            }
        },
        "dtos.ParticipantDetailResponse": {
            "type": "object",
            "properties": {
                "billId": {
                    "type": "string"
                },
                "billTitle": {
                    "type": "string"
                },
                "creatorId": {
                    "type": "string"
                },
                "items": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.Item"
                    }
                },
                "participantId": {
                    "type": "string"
                },
                "totalOwed": {
                    "type": "integer"
                }
            }
        },
        "dtos.ReceiptItem": {
            "type": "object",
            "properties": {
                "name": {
                    "type": "string",
                    "example": "Front and rear brake cables"
                },
                "priceAfterTax": {
                    "type": "number",
                    "example": 105.88083
                },
                "priceInHBAR": {
                    "type": "number",
                    "example": 0
                },
                "quantity": {
                    "type": "number",
                    "example": 1
                },
                "totalPrice": {
                    "type": "number",
                    "example": 100
                },
                "unitPrice": {
                    "type": "number",
                    "example": 100
                }
            }
        },
        "dtos.ReceiptResponse": {
            "type": "object",
            "properties": {
                "date": {
                    "type": "string",
                    "example": "2025-10-02"
                },
                "items": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/dtos.ReceiptItem"
                    }
                },
                "storeName": {
                    "type": "string",
                    "example": "Nigger Store"
                },
                "tax": {
                    "type": "number",
                    "example": 9.1
                },
                "totalAmount": {
                    "type": "number",
                    "example": 15.4
                }
            }
        },
        "models.Item": {
            "type": "object",
            "properties": {
                "billId": {
                    "type": "string"
                },
                "itemId": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "participantId": {
                    "type": "string"
                },
                "price": {
                    "type": "integer"
                }
            }
        },
        "models.User": {
            "type": "object",
            "properties": {
                "wallet_address": {
                    "type": "string"
                }
            }
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "1.0",
	Host:             "",
	BasePath:         "/api/v1",
	Schemes:          []string{},
	Title:            "",
	Description:      "",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
